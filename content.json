{"meta":{"title":"漫漫白衣路，少年追光时","subtitle":"漫漫白衣路，少年追光时","description":"","author":"arthersun","url":"https://arthersun.github.io","root":"/"},"pages":[{"title":"书单","date":"2021-11-18T18:08:39.655Z","updated":"2021-11-18T17:52:51.078Z","comments":false,"path":"books/index.html","permalink":"https://arthersun.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-11-18T18:12:20.067Z","updated":"2021-11-18T17:52:51.079Z","comments":true,"path":"links/index.html","permalink":"https://arthersun.github.io/links/index.html","excerpt":"","text":""},{"title":"","date":"2021-11-18T18:13:07.553Z","updated":"2021-11-18T18:13:07.553Z","comments":true,"path":"links/links.json","permalink":"https://arthersun.github.io/links/links.json","excerpt":"","text":"{\"Name\":{\"link\":\"http://example.com\",\"avatar\":\"http://example.com/avatar.png\",\"desc\":\"这是一个描述\"}}"}],"posts":[{"title":"开题要点","slug":"开题要点","date":"2021-11-18T02:49:42.000Z","updated":"2021-11-18T05:57:01.546Z","comments":true,"path":"2021/11/18/开题要点/","link":"","permalink":"https://arthersun.github.io/2021/11/18/%E5%BC%80%E9%A2%98%E8%A6%81%E7%82%B9/","excerpt":"","text":"开题报告 题目：落实到方法， 解决问题 –&gt; 说人家的方法有问题用人家的方法-&gt;说人家的方法好-&gt;可以为本文在xx场景下提供选择。 问题 干的事和问题不是同一个东西 设计算法的难点在哪 3.1研究方法 理论研究实验数据 3.2技术路线 针对本文的三个研究内容，分别阐述技术路线，具体如下。 3.3可行性分析 1.研究经验可借鉴2.数据条件具备3.实验环境具备4.理论研究能力具备5.实验能力具备6.技术路线可行 PPT 参考文献不用写全名，写是哪个期刊上就行 研究现状能说清楚就不要贴图从别人的论文中找现状的证据贴在PPT中 做case分析 根据产出主要实现哪两个难点，PPT有图放图，文档不用画。","categories":[],"tags":[]},{"title":"2021_Yu","slug":"2021-Yu","date":"2021-11-18T02:26:35.000Z","updated":"2021-11-18T02:50:04.390Z","comments":true,"path":"2021/11/18/2021-Yu/","link":"","permalink":"https://arthersun.github.io/2021/11/18/2021-Yu/","excerpt":"","text":"多副本审计","categories":[],"tags":[]},{"title":"2019_Guo","slug":"2019-Guo","date":"2021-11-17T15:04:45.000Z","updated":"2021-11-17T16:10:41.799Z","comments":true,"path":"2021/11/17/2019-Guo/","link":"","permalink":"https://arthersun.github.io/2021/11/17/2019-Guo/","excerpt":"","text":"(1)客户将其数据外包给CSP; (2)客户将审计工作外包给审计师; (3)通过依赖比特币[22]的功能，审计员定期审计CSP，检查外包数据是否完整; (4)每次审核后，审核员创建一个日志条目，记录他在这一点上的审核工作; (5)客户可以随时审核日志文件，以检查审核员过去是否诚实履行其审计工作; (6)客户端将更新的哈希值发送给审计师;审核员对RBMT进行更新，并将更新证明发送给CSP进行验证; (8)客户端也验证从CSP接收到的更新证明，并将更新后的数据块发送给CSP。","categories":[],"tags":[]},{"title":"2015_Ayad","slug":"2015-Ayad","date":"2021-11-17T13:48:01.000Z","updated":"2021-11-17T13:48:26.023Z","comments":true,"path":"2021/11/17/2015-Ayad/","link":"","permalink":"https://arthersun.github.io/2021/11/17/2015-Ayad/","excerpt":"","text":"外包数据的核心设计原则之一是为各种应用程序提供数据的动态行为。这意味着远程存储的数据不仅可以由授权用户访问，而且还可以由数据所有者更新和缩放(通过块级操作)。[1] -[9]中提出的PDP方案只关注静态存储的数据，其中外包数据在远程服务器上保持不变。处理动态数据的PDP结构的例子是[10]-[14]。后者是数据文件的单个副本。尽管PDP方案已经给出了静态数据的多个副本，参见[15]-[17]，据我们所知，这是第一个直接处理动态数据的多个副本的PDP方案。","categories":[],"tags":[]},{"title":"2016_张玉清","slug":"2016-张玉清","date":"2021-11-17T13:27:36.000Z","updated":"2021-11-17T13:48:08.024Z","comments":true,"path":"2021/11/17/2016-张玉清/","link":"","permalink":"https://arthersun.github.io/2021/11/17/2016-%E5%BC%A0%E7%8E%89%E6%B8%85/","excerpt":"","text":"在这里摘录了一段数据所有权证明的定义和意义感觉很不错 数据所有权的证明(provable data possession,简称PDP)[75]同样可以公开验证云端数据的完整性.由于验证过程中服务器的数据量和通信量较小,因此PDP模型适用于大规模分布式存储系统.当数据以多副本的方式存储于CSP时,用户需要对副本的个数与一致性进行额外的判断.为此,Barsoum等人[76]提出了相应的解决方案MB-PMDDP ,同时能够抵御服务器合谋并支持动态的数据更新.类似地,基于身份的分布式数据完整性检测模型ID-DPDP[77]针对数据存储于不同云服务器的情况,实现了私有验证、委托验证和公开验证.","categories":[],"tags":[]},{"title":"论文的摘录","slug":"论文的摘录","date":"2021-11-17T04:01:32.000Z","updated":"2021-11-17T13:27:42.748Z","comments":true,"path":"2021/11/17/论文的摘录/","link":"","permalink":"https://arthersun.github.io/2021/11/17/%E8%AE%BA%E6%96%87%E7%9A%84%E6%91%98%E5%BD%95/","excerpt":"","text":"历史 Ateniese等[36]首次提出了一种可扩展、高效的PDP，支持除数据插入外的所有动态数据操作。 Erway等[37]首次提出了一种支持所有动态数据操作的完全动态可证明数据持有(DPDP)方案。 他们的方案采用基于秩的认证跳跃表来管理数据块的动态信息。 然而，他们的方案不能支持公开审计。 Wang等[38]提出了一种全动态审计方案，通过引入MHT来存储数据块的动态信息。他们利用Boneh-Lynn-Shacham (BLS)短签名代替RSA签名构造同态可验证标签(HVTs)，以减少通信开销。 Mukundan等人[39]提出了一种动态的多副本云审计方案，通过去除hvt中的索引信息。但是[38]和[39]都不验证数据块的索引，这意味着云存储服务器可以在任何位置使用数据块通过验证。 Zhu等人[8]提出了一个与索引哈希表相关的动态审计方案。他们将BLS签名与数据片段技术相结合，以减少存储开销。 Barsoum和Hasan[25]通过引入映射版本表(MVT)提出了一种基于映射的多副本数据持有方案。MVT由序号、块号和块版本三列数据组成，用来记录每个数据块的逻辑位置和物理位置的映射关系。该方案只需要存储一个文件副本的动态信息，消除了辅助认证信息(AAI)，减少了存储和通信开销。但是，MVT必须存储在TPA中。与CSP相比，TPA并不是一个存储密集型实体。因此，为无数云用户存储mvt将消耗TPA的大量存储资源。而且方案不安全，可能会出现[8]和[40]提出的HVT伪造问题。 Zhang等[24]提出了一种动态复制数据审计方案，采用改进的MHT (mMHT)来验证数据块及其指标的完整性。Liu等人[7]提出了一种动态多副本云审计方案，其结构为多副本MHT (MR-MHT)，将每个数据块的所有副本组织成一个副本子树。但是，为了防止替换攻击，他们的方案由于采用了map-to-point hash函数，引入了额外的计算MR-MHT叶节点的成本。此外，由于提出的MHT结构的深度比普通MHT大得多，验证成本大大增加。","categories":[],"tags":[]},{"title":"2011_Zhu","slug":"2011-Zhu","date":"2021-11-16T16:00:00.000Z","updated":"2021-11-18T01:57:09.716Z","comments":true,"path":"2021/11/17/2011-Zhu/","link":"","permalink":"https://arthersun.github.io/2021/11/17/2011-Zhu/","excerpt":"","text":"关于动态审计中的IHT的作用。 标签生成阶段。客户端(DO)使用一个秘密密钥对一个文件进行预处理，该文件由n个块的集合组成，生成一组公共验证参数(PVPs)和IHT，存储在TPA中，将文件和一些验证标记（File+Flags）传输给CSP，并可以删除其本地副本(见图2a); 定期抽样审计。通过使用可检索的交互式证明协议，TPA(或其他应用程序)发出一个“随机抽样”挑战，以审核存储在TPA中的验证信息(涉及PVP和IHT)的外包数据的完整性和可用性(见图2b);和 审计动态操作。一个AA，谁持有一个DO的秘密钥匙sk，可以操纵外包数据并更新存储在TPA中的相关IHT。sk的私密性和检查算法保证了存储服务器不能欺骗AA，伪造有效的审计记录 1总结：这张表帮我看清楚了动态审计过程中的IHT表的位置，IHT表是一张维护在TPA中的，由序列号、区块号、版本号和随机整数组成。除了记录数据的变化，每个记录Xi表被用来生成一个唯一的哈希值，这反过来是用来构造一个在秘密的钥匙sk旁边的签名标签σi。 IHT与HDFS的结合 基于这些hash值，客户端或TPA可以通过审计服务实现验证协议。在现有的HDFS中，我们的异常检测方案可以很容易地替换普通的校验和算法，而无需下载数据。","categories":[],"tags":[]},{"title":"node与java版本的问题实录","slug":"nvs与node版本的问题实录","date":"2021-11-15T11:00:13.000Z","updated":"2021-11-15T12:04:20.108Z","comments":true,"path":"2021/11/15/nvs与node版本的问题实录/","link":"","permalink":"https://arthersun.github.io/2021/11/15/nvs%E4%B8%8Enode%E7%89%88%E6%9C%AC%E7%9A%84%E9%97%AE%E9%A2%98%E5%AE%9E%E5%BD%95/","excerpt":"","text":"今天使用nvs时候遇到了node版本的问题 原因大概是有些node包（node-sass）不支持高版本的node包，这个可以到node包的官网去查看。 解决方法 使用nvs安装其他node版本 指令集 123nvs add 14nvs use 14nvs list 此外，也遇到java版本的问题 java版本 1UnsupportedClassVersionError: run/halo/app/Application has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0 查询原因为使用了java11进行编译，但是运行时使用的是java8 45 = Java 1.1 46 = Java 1.2 47 = Java 1.3 48 = Java 1.4 49 = Java 5 50 = Java 6 51 = Java 7 52 = Java 8 53 = Java 9 54 = Java 10 55 = Java 11 56 = Java 12 57 = Java 13 解决方案：下载java11，然后修改系统环境变量","categories":[],"tags":[]},{"title":"docker学习","slug":"docker学习","date":"2021-11-15T09:24:05.000Z","updated":"2021-11-15T10:05:11.089Z","comments":true,"path":"2021/11/15/docker学习/","link":"","permalink":"https://arthersun.github.io/2021/11/15/docker%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"docker学习 docker概述 docker安装 docker命令 镜像命令 容器命令 操作命令 ….. docker镜像 容器数据卷 dockerFile docker网络原理 IDEA 整合docker docker compose docker swarm CI\\CD Jenkins 知道的越多，不知道的越多！","categories":[],"tags":[]},{"title":"最新想看的一些新技术","slug":"最新想看的一些新技术","date":"2021-11-14T17:42:50.000Z","updated":"2021-11-18T05:39:26.584Z","comments":true,"path":"2021/11/15/最新想看的一些新技术/","link":"","permalink":"https://arthersun.github.io/2021/11/15/%E6%9C%80%E6%96%B0%E6%83%B3%E7%9C%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E6%8A%80%E6%9C%AF/","excerpt":"","text":"js关于同步异步的一些知识 yarn和大数据的知识 go语法和框架学习 内网多人共享gitea的学习 typescript docker: 尝试将区块链后端和代码打包成docker mongodb 如何内网穿透 如何不用springboot，只用node框架实现现有的后端（Modway.js） 数据结构和算法的学习 Redis 和 如何用Lua解释器实现Redis脚本功能","categories":[],"tags":[]},{"title":"如何使用git进行多人协作","slug":"如何使用git进行多人协作","date":"2021-11-14T07:02:32.000Z","updated":"2021-11-15T11:27:02.964Z","comments":true,"path":"2021/11/14/如何使用git进行多人协作/","link":"","permalink":"https://arthersun.github.io/2021/11/14/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git%E8%BF%9B%E8%A1%8C%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/","excerpt":"","text":"起子 github可以建立免费快速的私有云，在github上进行项目工程的团队合作是非常高效的 善用github的分支功能 github的分支功能初识时十分鸡肋，但是用多了之后设计的非常成功。 对于多人合作，我们需要共有一个主分支(master or dev) 我们在主分支上进行代码合并，并作为最终版本展示。 而其他分支作为每个人个人临时的代码池，用于最后的代码合并，合并完进行删除。 流程 12345678910111213141. 新的开发需求下达2. 对主分支进行pull（设这里的主分支为dev）3. 切换到自己的分支`git checkout -b sun`(-b是新建分支的意思)4. `git rebase dev`5. 进行开发工作6. `git add .`7. `git commit &quot;update:xxx功能&quot;`8. `git push`（远程push）9. 审核员进行审核，审核完成后进行合并10. 然后删除该分支11. 删除本地分支：`git branch -D sun`12. 删除远程分支：`git push origin --delete sun `finished","categories":[],"tags":[]},{"title":"关于npm和git源和设置代理的一些问题","slug":"关于npm的一些问题","date":"2021-11-14T06:35:45.000Z","updated":"2021-11-15T11:20:51.791Z","comments":true,"path":"2021/11/14/关于npm的一些问题/","link":"","permalink":"https://arthersun.github.io/2021/11/14/%E5%85%B3%E4%BA%8Enpm%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/","excerpt":"","text":"问题描述 在进行npm install时，我电脑上挂了科学上网，导致需要切换代理。而国内的淘宝源也没有办法提速，甚至会导致卡顿，这致使我一直被折磨。 git的情况 这个情况曾经出现在git上，因为当时我的socks5代理为:127.0.0.1:10808，http代理为127.0.0.1:10809 我进行git设置 git设置代理 git config –global http.proxy http://127.0.0.1:10808 git config –global https.proxy http://127.0.0.1:10808 导致无法顺利访问git，错误代码443. 解决方案：我将http代理改为了10809就可以了。 npm的情况 npm更换淘宝源，没有用 npm config set registry https://registry.npm.taobao.org 需要更换代理，和git一样 npm config set proxy http://127.0.0.1:10809","categories":[],"tags":[]}],"categories":[],"tags":[]}